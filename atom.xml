<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Let's Swift]]></title>
  <subtitle><![CDATA[Writing the code, change the world!]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://Murk.github.com/"/>
  <updated>2014-09-15T11:32:06.735Z</updated>
  <id>http://Murk.github.com/</id>
  
  <author>
    <name><![CDATA[Misery]]></name>
    <email><![CDATA[715616554@qq.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Swift Notes(Classes and Objects)]]></title>
    <link href="http://Murk.github.com/2014/06/05/swift-notes(classes-and-objects)/"/>
    <id>http://Murk.github.com/2014/06/05/swift-notes(classes-and-objects)/</id>
    <published>2014-06-05T11:54:39.000Z</published>
    <updated>2014-06-05T11:54:39.000Z</updated>
    <content type="html"><![CDATA[]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift Notes]]></title>
    <link href="http://Murk.github.com/2014/06/03/swift-notes/"/>
    <id>http://Murk.github.com/2014/06/03/swift-notes/</id>
    <published>2014-06-03T13:19:25.000Z</published>
    <updated>2014-06-05T11:41:58.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>Hello Swift<br>下载Xcode6之后，新建工程，创建Playground就可以直接执行Swift代码：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="function"><span class="title">println</span><span class="params">(<span class="string">"Hello Swift!"</span>)</span></span>
</pre></td></tr></table></figure>

<p>打印输出:Hello Swift!</p>
<ul>
<li>变量</li>
</ul>
<ul>
<li>使用<em>let</em>关键字创建常量，使用<em>var</em>关键字创建变量：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="built_in">var</span> <span class="built_in">variable</span> <span class="subst">=</span> <span class="number">24</span>
<span class="built_in">variable</span> <span class="subst">=</span> <span class="number">25</span>
<span class="keyword">let</span> constant <span class="subst">=</span> <span class="number">28</span>
<span class="keyword">let</span> intConstant: Int <span class="subst">=</span> <span class="number">30</span>
<span class="built_in">var</span> strVariable: <span class="built_in">String</span><span class="subst">?</span> <span class="subst">=</span> <span class="string">"hello"</span>
</pre></td></tr></table></figure>

<p>（类型后面的”?”标记值可为nil）</p>
<ul>
<li>不同类型进行运算操作需要添加类型转换，否则报错：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">let</span> label = <span class="string">"The width is "</span>
<span class="keyword">let</span> width = <span class="number">94</span>
<span class="keyword">let</span> widthLabel = label + <span class="built_in">String</span>(width)
</pre></td></tr></table></figure>

<ul>
<li>词典和数组</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">var</span> array = [<span class="string">"item1"</span>, <span class="string">"item2"</span>, <span class="string">"item3"</span>]
array[<span class="number">1</span>] = [<span class="string">"item4"</span>]
<span class="keyword">var</span> dictionary = [<span class="string">"key1"</span>: <span class="string">"value1"</span>,
				<span class="string">"key2"</span>: <span class="string">"value2"</span>,
]
dictionary[<span class="string">"key3"</span>] = <span class="string">"value3"</span>

<span class="keyword">var</span> emptydic = Dictionary&lt;<span class="built_in">String</span>, Int&gt;()
<span class="keyword">var</span> emptyarr = <span class="built_in">Array</span>&lt;<span class="built_in">String</span>&gt;()
<span class="keyword">var</span> emptyarr2 = <span class="built_in">String</span>[]()
</pre></td></tr></table></figure>

<ul>
<li>控制语句<br>使用<em>for</em> <em>in</em></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">var</span> p = <span class="number">0</span>
<span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>
{
    p += i
}
</pre></td></tr></table></figure>

<p><em>for</em> <em>in</em>也可以用于数组和词典</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">var</span> dictionary = [<span class="string">"key1"</span>: <span class="string">"value1"</span>,
				<span class="string">"key2"</span>: <span class="string">"value2"</span>,
]
<span class="keyword">for</span> (key, <span class="keyword">value</span>) <span class="keyword">in</span> dictionary
{
    println( key + <span class="keyword">value</span> )
}
</pre></td></tr></table></figure>

<p>Swift除了..还有… ..生成前闭后开的区间，而…生成前闭后闭的区间</p>
<ul>
<li>函数和闭包<br><em>func</em>关键字声明函数 使用<em>-&gt;</em>分隔参数和函数类型</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>func greet(name: <span class="built_in">String</span>, day: <span class="built_in">String</span>) <span class="subst">-&gt; </span><span class="built_in">String</span> {
    <span class="keyword">return</span> <span class="string">"Hello \(name), today is \(day)."</span>
}
greet(<span class="string">"Bob"</span>, <span class="string">"Tuesday"</span>)
</pre></td></tr></table></figure>

<p>使用tuple可以返回多值</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>func <span class="function">getGasPrices()</span> -&gt; (<span class="value">Double</span>, <span class="value">Double</span>, <span class="value">Double</span>) {
    return (3<span class="class">.59</span>, 3<span class="class">.69</span>, 3<span class="class">.79</span>)
}
<span class="function">getGasPrices()</span>
</pre></td></tr></table></figure>

<p>可变个数的参数，参数存放在数组中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>func sumOf(numbers: Int...) -&gt; Int {
    var <span class="built_in">sum</span> = <span class="number">0</span>
    <span class="keyword">for</span> <span class="built_in">number</span> <span class="operator">in</span> numbers {
        <span class="built_in">sum</span> += <span class="built_in">number</span>
    }
    <span class="constant">return</span> <span class="built_in">sum</span>
}
sumOf()
sumOf(<span class="number">42</span>, <span class="number">597</span>, <span class="number">12</span>)
</pre></td></tr></table></figure>

<p>函数嵌套，函数声明可以在另外一个函数中并且访问这个函数的内部变量</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>func returnFifteen<span class="function"><span class="params">()</span> -&gt;</span> Int {
    <span class="reserved">var</span> y = <span class="number">10</span>
    func add() {
        y += <span class="number">5</span>
    }
    add()
    <span class="keyword">return</span> y
}
returnFifteen()
</pre></td></tr></table></figure>

<p>函数类型为<em>first-class</em>类型，可以作为另外一个函数的返回值，也可以作为参数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre>func makeIncrementer<span class="function"><span class="params">()</span> -&gt;</span> (Int<span class="function"> -&gt;</span> Int) {
    func addOne<span class="function"><span class="params">(number: Int)</span> -&gt;</span> Int {
        <span class="keyword">return</span> <span class="number">1</span> + number
    }
    <span class="keyword">return</span> addOne
}
<span class="reserved">var</span> increment = makeIncrementer()
increment(<span class="number">7</span>)

func hasAnyMatches<span class="function"><span class="params">(list: Int[], condition: Int -&gt; Bool)</span> -&gt;</span> Bool {
    <span class="keyword">for</span> item <span class="keyword">in</span> list {
        <span class="keyword">if</span> condition(item) {
            <span class="keyword">return</span> <span class="literal">true</span>
        }
    }
    <span class="keyword">return</span> <span class="literal">false</span>
}
func lessThanTen<span class="function"><span class="params">(number: Int)</span> -&gt;</span> Bool {
    <span class="keyword">return</span> number &lt; <span class="number">10</span>
}
<span class="reserved">var</span> numbers = [<span class="number">20</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">12</span>]
hasAnyMatches(numbers, lessThanTen)
</pre></td></tr></table></figure>

<p>函数是一种特殊形式的闭包(closures)，使用(<em>{}</em>)来声明一个闭包，闭包中<em>in</em>关键词用于分隔参数和返回值，当参数和返回值类型确定的时候，可以省略类型。(下面两个写法效果一样)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>numbers.map({
    (<span class="built_in">number</span>: Int) -&gt; Int <span class="operator">in</span>
    let <span class="built_in">result</span> = <span class="number">3</span> * <span class="built_in">number</span>
    <span class="constant">return</span> <span class="built_in">result</span>
    }) 

numbers.map({ <span class="built_in">number</span> <span class="operator">in</span> <span class="number">3</span> * <span class="built_in">number</span> })
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="Swift" scheme="http://Murk.github.com/tags/Swift/"/>
    
      <category term="Xcode 6" scheme="http://Murk.github.com/tags/Xcode%206/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UICollectionView用法]]></title>
    <link href="http://Murk.github.com/2014/05/14/uicollectionview%E7%94%A8%E6%B3%95/"/>
    <id>http://Murk.github.com/2014/05/14/uicollectionview用法/</id>
    <published>2014-05-14T14:40:09.000Z</published>
    <updated>2014-05-14T14:40:09.000Z</updated>
    <content type="html"><![CDATA[]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[使用CFStringTokenizerRef进行分词]]></title>
    <link href="http://Murk.github.com/2014/05/14/%E4%BD%BF%E7%94%A8cfstringtokenizerref%E8%BF%9B%E8%A1%8C%E5%88%86%E8%AF%8D/"/>
    <id>http://Murk.github.com/2014/05/14/使用cfstringtokenizerref进行分词/</id>
    <published>2014-05-14T14:19:09.000Z</published>
    <updated>2014-05-14T14:37:42.000Z</updated>
    <content type="html"><![CDATA[<p>使用CFStringTokenizer可以对string进行分词，示例代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre>    CFStringRef <span class="built_in">string</span> = (__bridge CFStringRef)@<span class="string">"这是一段示例代码"</span>; //你的<span class="built_in">string</span>
    CFLocaleRef locale = CFLocaleCopyCurrent();
    
    CFStringTokenizerRef tokenizer =
    CFStringTokenizerCreate(
                            <span class="keyword">nil</span>
                            , <span class="built_in">string</span>
                            , CFRangeMake(<span class="number">0</span>, CFStringGetLength(<span class="built_in">string</span>))
                            , kCFStringTokenizerUnitWord//Tokenization options,按单词分组
                            , locale);
    
    CFStringTokenizerTokenType tokenType = kCFStringTokenizerTokenNone;
    unsigned tokensFound = <span class="number">0</span>;
    
    <span class="keyword">while</span>(kCFStringTokenizerTokenNone !=
          (tokenType = CFStringTokenizerAdvanceToNextToken(tokenizer))) {
        CFRange wordRange = CFStringTokenizerGetCurrentTokenRange(tokenizer);
        NSLog(@<span class="string">"%@"</span>,(__bridge_transfer NSString *)CFStringCreateWithSubstring(<span class="keyword">nil</span>, <span class="built_in">string</span>, wordRange));
        ++tokensFound;
    }
    CFRelease(tokenizer);
    CFRelease(locale);
</pre></td></tr></table></figure>

<p>打印输出</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>2014<span class="tag">-05-14</span> 22<span class="pseudo">:35</span><span class="pseudo">:16</span><span class="class">.647</span> <span class="tag">classTest</span><span class="attr_selector">[35429:70b]</span> 这
2014<span class="tag">-05-14</span> 22<span class="pseudo">:35</span><span class="pseudo">:16</span><span class="class">.661</span> <span class="tag">classTest</span><span class="attr_selector">[35429:70b]</span> 是
2014<span class="tag">-05-14</span> 22<span class="pseudo">:35</span><span class="pseudo">:16</span><span class="class">.661</span> <span class="tag">classTest</span><span class="attr_selector">[35429:70b]</span> 一
2014<span class="tag">-05-14</span> 22<span class="pseudo">:35</span><span class="pseudo">:16</span><span class="class">.662</span> <span class="tag">classTest</span><span class="attr_selector">[35429:70b]</span> 段
2014<span class="tag">-05-14</span> 22<span class="pseudo">:35</span><span class="pseudo">:16</span><span class="class">.662</span> <span class="tag">classTest</span><span class="attr_selector">[35429:70b]</span> 示例
2014<span class="tag">-05-14</span> 22<span class="pseudo">:35</span><span class="pseudo">:16</span><span class="class">.663</span> <span class="tag">classTest</span><span class="attr_selector">[35429:70b]</span> 代码
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="分词" scheme="http://Murk.github.com/tags/%E5%88%86%E8%AF%8D/"/>
    
      <category term="Objective-C" scheme="http://Murk.github.com/tags/Objective-C/"/>
    
      <category term="CFStringTokenizer" scheme="http://Murk.github.com/tags/CFStringTokenizer/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Objective-C中属性@property中atomic的实现]]></title>
    <link href="http://Murk.github.com/2014/04/27/objective-c%E4%B8%AD%E5%B1%9E%E6%80%A7@property%E4%B8%ADatomic%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://Murk.github.com/2014/04/27/objective-c中属性@property中atomic的实现/</id>
    <published>2014-04-27T14:15:36.000Z</published>
    <updated>2014-04-27T15:20:52.000Z</updated>
    <content type="html"><![CDATA[<p>Objective-C中，属性@property默认是线程不安全的，也就是常见的nonatomic，这个时候，如果多个线程同时操作这个属性就可能会出现问题，这时需要设置属性为atomic，当然也可以通过代码来控制线程安全；</p>
<ul>
<li>使用@synchronized<br>这种方法是使用苹果提供的“synchronization block”来实现，</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>- (void)synchronizedMethod
{
    <span class="variable">@synchronized</span>(<span class="keyword">self</span>){
        <span class="regexp">//</span>线程安全代码
    }
}
</pre></td></tr></table></figure>

<p>这个方法根据给定的self对象创建锁，等待{}中的代码执行完毕，释放锁，这种写法会面临效率问题，如果在同一个类中多处使用了这个写法，这些地方的代码都需要按顺序执行，虽然有可能这些方法并不相关。<br>－ 使用NSLock<br>通过创建NSLock对象来进行同步操作，</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>_lock = [[NSLock alloc] init];
- (<span class="keyword">void</span>)synchronizedMethod
{
    [_lock <span class="keyword">lock</span>];
    <span class="comment">//线程安全代码</span>
    [_lock unlock];
}
</pre></td></tr></table></figure>

<p>这里的NSLock保证了代码在的线程安全，另一种NSRecursiveLock用法类似，不过线程可以多次持有该锁。<br>以上两种方式，在某些情况下会出现死锁，效率也不一定高，下面就是本文的重点了，使用GCD来实现更加高效简单的代码加锁<br>－ 使用GCD<br>创建串行队列，将代码放在串行队列中执行保证线程安全。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>_syncQueue = dispatch_queue_create(<span class="string">"io.sfkong"</span>, <span class="literal">NULL</span>);
- (<span class="keyword">void</span>)synchronizedMethod
{
    <span class="built_in">dispatch_sync</span>(_syncQueue, ^{
       <span class="comment">//线程安全代码</span>
    });
}
</pre></td></tr></table></figure>

<p>这个操作放在setter和getter里面再合适不过了:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>- (<span class="built_in">NSString</span> *)someString
{
    __block <span class="built_in">NSString</span> *localSomeString;
    <span class="built_in">dispatch_sync</span>(_syncQueue, ^{
        localSomeString = _someString;
    });
    <span class="keyword">return</span> localSomeString;
}
- (<span class="keyword">void</span>)setSomeString:(<span class="built_in">NSString</span> *)someString
{
    <span class="built_in">dispatch_sync</span>(_syncQueue, ^{
        _someString = someString;
    });
}
</pre></td></tr></table></figure>

<p>将属性操作放在串行队列中，所有针对属性的操作都同步了。另GCD的底层实现，使得这段代码的优化更好，开发者也无需担心代码的优化问题。</p>
<ul>
<li>进一步优化<br>由于setter不需要立刻返回，可以将以上setter里面的同步函数换成异步dispatch_async，来进一步提升性能，当然这样也是有代价的，异步函数会对block进行拷贝，如果block中代码执行的速度快于block的拷贝速度，则还是选择dispatch_sync来执行代码，所以具体问题具体分析，选择合适的函数来执行。</li>
<li>将优化进行到底<br>通常，多个getter之间是可以并发执行的，而setter和getter之间是不允许并发执行，利用这个特点，可以写出速度更快的代码，使用NSLock很难实现，这时GCD的好处就体现出来了：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>_syncQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);
- (<span class="built_in">NSString</span> *)someString
{
    __block <span class="built_in">NSString</span> *localSomeString;
    <span class="built_in">dispatch_sync</span>(_syncQueue, ^{
        localSomeString = _someString;
    });
    <span class="keyword">return</span> localSomeString;
}
- (<span class="keyword">void</span>)setSomeString:(<span class="built_in">NSString</span> *)someString
{
    dispatch_barrier_sync(_syncQueue, ^{
        _someString = someString;
    });
}
</pre></td></tr></table></figure>

<p>这里使用并发队列，getter可以被随时调用不会出现锁的问题，setter方法使用栅栏(barrier)来进行保护，保证setter的线程安全；代码跑得飞快有木有</p>
<blockquote>
<p>参考《Effective Objective-C》，如有雷同，纯属本文抄袭！！</p>
</blockquote>
]]></content>
    
    
      <category term="同步锁" scheme="http://Murk.github.com/tags/%E5%90%8C%E6%AD%A5%E9%94%81/"/>
    
      <category term="GCD" scheme="http://Murk.github.com/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用GCD替换performSelector这一类方法]]></title>
    <link href="http://Murk.github.com/2014/04/27/mrc%E5%92%8Carc%E4%B8%ADblock%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://Murk.github.com/2014/04/27/mrc和arc中block的内存管理/</id>
    <published>2014-04-27T11:54:44.000Z</published>
    <updated>2014-04-27T15:22:03.000Z</updated>
    <content type="html"><![CDATA[<p>在Objective-C中有这样一类方法</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(aa) withObject:<span class="literal">nil</span> afterDelay:<span class="number">1</span>];
    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(aa) onThread:[<span class="built_in">NSThread</span> mainThread] withObject:<span class="literal">nil</span> waitUntilDone:<span class="literal">NO</span>];
</pre></td></tr></table></figure>

<p>这一系列方法可以将执行时间推迟，也可以指定执行的线程。在引入GCD以后，这些方法就可以使用GCD来替换;<br>例如上面的两个方法就可以这么写:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>    <span class="function">dispatch_after(<span class="function">dispatch_time(DISPATCH_TIME_NOW, (int64_t)</span>(<span class="number">1</span> * NSEC_PER_SEC)</span>), <span class="function">dispatch_get_main_queue()</span>, ^{
        <span class="attr_selector">[self aa]</span>;
    });
    <span class="function">dispatch_async(<span class="function">dispatch_get_main_queue()</span>, ^{
        [self aa];
    })</span>;
</pre></td></tr></table></figure>

<p>好处就是，可以避免performSelector这一类方法带来的内存警告：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>warning:performSelector may cause a leak because its selector is unknown <span class="preprocessor">[</span><span class="attribute">-Warc</span><span class="attribute">-performSelector</span><span class="attribute">-leaks</span><span class="preprocessor">]</span><span class="markup"></span>
</pre></td></tr></table></figure>

<p>更重要的是，使用GCD逼格更高！！！</p>
]]></content>
    
    
      <category term="GCD" scheme="http://Murk.github.com/tags/GCD/"/>
    
      <category term="block" scheme="http://Murk.github.com/tags/block/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[xcode更新到5.1报错：Cast from pointer to smaller type 'int' loses information]]></title>
    <link href="http://Murk.github.com/2014/04/22/xcode%E6%9B%B4%E6%96%B0%E5%88%B051%E6%8A%A5%E9%94%99%EF%BC%9Acast-from-pointer-to-smaller-type-int-loses-information/"/>
    <id>http://Murk.github.com/2014/04/22/xcode更新到51报错：cast-from-pointer-to-smaller-type-int-loses-information/</id>
    <published>2014-04-22T03:42:46.000Z</published>
    <updated>2014-04-27T15:21:50.000Z</updated>
    <content type="html"><![CDATA[<p>Xcode更新到5.1版本之后，项目中一个SearchCore文件报错</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>Cast <span class="keyword">from</span> pointer <span class="keyword">to</span> smaller <span class="keyword">type</span> <span class="string">'int'</span> loses information
</pre></td></tr></table></figure>

<p>由于5.1编译包括了arm64，导致指针大小长度编程8字节。<br>解决方法：<br>修改target的build setting中的Architectures,删除$(ARCHS_STANDARD)，添加armv7和armv7s，重新编译即可</p>
]]></content>
    
    
      <category term="xcode" scheme="http://Murk.github.com/tags/xcode/"/>
    
  </entry>
  
</feed>
